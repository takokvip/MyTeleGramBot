from telethon import TelegramClient, events
from telethon.tl.functions.messages import GetStickerSetRequest
from telethon.tl.types import InputStickerSetShortName, User, Channel, Chat
from telethon.errors.rpcerrorlist import SessionPasswordNeededError
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.types import UserStatusEmpty, UserStatusOnline, UserStatusOffline, UserStatusRecently, UserStatusLastWeek, UserStatusLastMonth
from dotenv import load_dotenv
import os
import json
import requests
import openai
from datetime import datetime, time
import qrcode
import asyncio


# Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ t·ªáp .env
load_dotenv()

# Th√¥ng tin ƒëƒÉng nh·∫≠p cho t√†i kho·∫£n Telegram
api_id = os.getenv('API_ID')
api_hash = os.getenv('API_HASH')
phone = os.getenv('PHONE_NUMBER')
target_user = os.getenv('TARGET_USER')
api_chatgpt = os.getenv('API_CHATGPT')

# V·∫Ω v·ªùi
max_daily_drawings = 6

# Bi·∫øn t·∫°m ƒë·ªÉ l∆∞u ID c·ªßa ng∆∞·ªùi d√πng hi·ªán ƒëang s·ª≠ d·ª•ng l·ªánh /ve
current_user = None

# H√†ng ƒë·ª£i ƒë·ªÉ l∆∞u tr·ªØ ID c·ªßa ng∆∞·ªùi d√πng ƒëang ch·ªù
queue = []

# Ki·ªÉm tra xem c√°c bi·∫øn m√¥i tr∆∞·ªùng c√≥ ƒë∆∞·ª£c n·∫°p ƒë√∫ng kh√¥ng
print(f"API ID: {api_id}")
print(f"API Hash: {api_hash}")
print(f"Phone Number: {phone}")
print(f"Target User: {target_user}")

# T·∫°o client cho t√†i kho·∫£n tr√™n m√°y t√≠nh
client = TelegramClient('kakalot5678', api_id, api_hash)

# ƒê∆∞·ªùng d·∫´n t·ªõi t·ªáp JSON
settings_file = 'settings.json'
ve_usage_file = 've_usage.json'

# H√†m t·∫£i danh s√°ch t·ª´ t·ªáp JSON
def load_settings():
    try:
        with open(settings_file, 'r') as f:
            data = json.load(f)
            return data['excluded_users'], data['allowed_groups']
    except FileNotFoundError:
        return [], {}

def load_ve_usage():
    try:
        with open(ve_usage_file, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

# H√†m l∆∞u danh s√°ch v√†o t·ªáp JSON
def save_settings(excluded_users, allowed_groups):
    with open(settings_file, 'w') as f:
        json.dump({'excluded_users': excluded_users, 'allowed_groups': allowed_groups}, f, indent=4)

def save_ve_usage(ve_usage):
    with open(ve_usage_file, 'w') as f:
        json.dump(ve_usage, f, indent=4)

# T·∫£i danh s√°ch lo·∫°i tr·ª´ v√† nh√≥m ƒë∆∞·ª£c ph√©p
excluded_users, allowed_groups = load_settings()
ve_usage = load_ve_usage()

# -----------------------------------------------------------------------
# Bi·∫øn l∆∞u tr·ªØ th·ªùi gian b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c m·∫∑c ƒë·ªãnh
default_start_time = time(22, 30)  # 22:30
default_end_time = time(12, 0)     # 12:00

# Bi·∫øn l∆∞u tr·ªØ th·ªùi gian hi·ªán t·∫°i cho start_time v√† end_time
start_time = default_start_time
end_time = default_end_time

# H√†m ki·ªÉm tra xem th·ªùi gian hi·ªán t·∫°i c√≥ trong kho·∫£ng cho ph√©p kh√¥ng
def is_within_allowed_hours():
    current_time = datetime.now().time()
    return start_time <= current_time or current_time <= end_time

# L·ªánh /on: thi·∫øt l·∫≠p th·ªùi gian ho·∫°t ƒë·ªông v·ªÅ m·∫∑c ƒë·ªãnh
async def handle_on_command():
    global start_time, end_time
    start_time = default_start_time
    end_time = default_end_time
    await client.send_message(target_user, "Bot ƒë√£ ƒë∆∞·ª£c b·∫≠t, th·ªùi gian ho·∫°t ƒë·ªông t·ª´ 12:00 ƒë·∫øn 22:30.")

# L·ªánh /off: thi·∫øt l·∫≠p th·ªùi gian ho·∫°t ƒë·ªông theo th·ªùi gian hi·ªán t·∫°i
async def handle_off_command():
    global start_time, end_time
    current_time = datetime.now().time()
    start_time = current_time
    end_time = current_time
    await client.send_message(target_user, f"Bot ƒë√£ t·∫°m d·ª´ng, th·ªùi gian ho·∫°t ƒë·ªông hi·ªán t·∫°i t·ª´ {current_time.strftime('%H:%M')}.")

# H√†m x·ª≠ l√Ω l·ªánh ƒë∆∞·ª£c g·ªçi b·ªüi s·ª± ki·ªán
@client.on(events.NewMessage)
async def handle_command(event):
    if event.message.message == '/on':
        await handle_on_command()
    elif event.message.message == '/off':
        await handle_off_command()
# -----------------------------------------------------------------------
# H√†m ki·ªÉm tra n·∫øu th·ªùi gian hi·ªán t·∫°i trong kho·∫£ng th·ªùi gian cho ph√©p
# def is_within_allowed_hours():
#     current_time = datetime.now().time()
#     start_time = time(22, 30)  # 22:30
#     end_time = time(12, 0)     # 12:00
#     return start_time <= current_time or current_time <= end_time

# H√†m h·ªó tr·ª£ l·∫•y t√™n ƒë·∫ßy ƒë·ªß c·ªßa ng∆∞·ªùi d√πng
async def get_user_full_name(client, username):
    try:
        user_entity = await client.get_entity(username)
        return f"{user_entity.first_name} {user_entity.last_name or ''}".strip()
    except:
        return username

# T·ªëi ∆∞u h√†ng ƒë·ª£i
async def process_queue():
    global current_user, queue

    while queue:
        next_user_id, next_username, next_prompt = queue.pop(0)
        current_user = next_user_id

        # L·∫•y th√¥ng tin ng∆∞·ªùi d√πng, bao g·ªìm t√™n v√† h·ªç
        user_entity = await client.get_entity(next_user_id)
        full_name = f"{user_entity.first_name} {user_entity.last_name or ''}".strip()

        # G·ª≠i tin nh·∫Øn "ƒêang t·∫°o tranh, vui l√≤ng ƒë·ª£i ‚úçÔ∏è..."
        creating_msg = await client.send_message(next_user_id, "ƒêang t·∫°o tranh, vui l√≤ng ƒë·ª£i ‚úçÔ∏è...")

        try:
            # G·ªçi API DALL-E 3 ƒë·ªÉ t·∫°o tranh
            openai.api_key = api_chatgpt
            response = openai.Image.create(
                prompt=next_prompt,
                n=1,
                size="1024x1024",
                model="dall-e-3",
                quality="standard"
            )
            image_url = response['data'][0]['url']

            # T·∫£i h√¨nh ·∫£nh t·ª´ URL
            image_response = requests.get(image_url)
            if image_response.status_code == 200:
                image_data = image_response.content

                # L∆∞u h√¨nh ·∫£nh v√†o t·ªáp t·∫°m th·ªùi
                with open("temp_image.png", "wb") as image_file:
                    image_file.write(image_data)

                # X√≥a tin nh·∫Øn "ƒêang t·∫°o tranh, vui l√≤ng ƒë·ª£i ‚úçÔ∏è..."
                await client.delete_messages(next_user_id, creating_msg.id)

                # G·ª≠i h√¨nh ·∫£nh ƒë·∫øn ng∆∞·ªùi d√πng v·ªõi ch√∫ th√≠ch
                await client.send_file(
                    next_user_id, 
                    "temp_image.png", 
                    caption=f"Tranh c·ªßa <b>{full_name}</b> v·∫Ω xong r·ªìi n√® üíã", 
                    parse_mode='html'
                )
            else:
                await client.send_message(next_user_id, "Xin l·ªói, kh√¥ng th·ªÉ t·∫£i tranh v√†o l√∫c n√†y.")
        except Exception as e:
            print(f"Error generating image: {e}")
            await client.send_message(next_user_id, "Xin l·ªói, kh√¥ng th·ªÉ t·∫°o tranh v√†o l√∫c n√†y.")

        # Clear bi·∫øn t·∫°m sau khi ho√†n th√†nh
        current_user = None

        # Delay ng·∫Øn ƒë·ªÉ tr√°nh c√°c v·∫•n ƒë·ªÅ v·ªÅ t·ªëc ƒë·ªô
        await asyncio.sleep(1)

# Check v·∫Ω h√†ng ƒë·ª£i
async def handle_ve_command(sender_id, sender_username, prompt):
    global current_user, queue

    print(f"{sender_username} (@{sender_id}) tham gia v·∫Ω tranh")
    print("Check h√†ng ch·ªù...")

    if current_user is None and not queue:
        # Kh√¥ng c√≥ ng∆∞·ªùi d√πng hi·ªán t·∫°i v√† kh√¥ng c√≥ h√†ng ch·ªù
        current_user = sender_id
        print(f"Kh√¥ng c√≥ h√†ng ch·ªù, g√°n id cho {sender_username} (@{sender_id})")
        queue.append((sender_id, sender_username, prompt))
        await process_queue()
    else:
        # N·∫øu c√≥ ng∆∞·ªùi ƒëang x·ª≠ l√Ω ho·∫∑c c√≥ h√†ng ch·ªù
        print(f"H√†ng ch·ªù hi·ªán ƒëang c√≥ {current_user}")
        queue.append((sender_id, sender_username, prompt))
        print(f"G·ª≠i th√¥ng b√°o cho {sender_username} (@{sender_id})")
        waiting_msg = await client.send_message(sender_id, "Vui l√≤ng ch·ªù trong gi√¢y l√°t...")
        return



async def main():
    await client.start(phone=phone)

    @client.on(events.NewMessage)
    async def handler(event):
        global excluded_users, allowed_groups, ve_usage

        try:
            sender = await event.get_sender()
            if isinstance(sender, User):
                sender_username = sender.username
                sender_name = sender.first_name + ' ' + sender.last_name if sender.last_name else sender.first_name
                sender_id = sender.id
            elif isinstance(sender, Channel) or isinstance(sender, Chat):
                sender_username = sender.username
                sender_name = sender.title
                sender_id = sender.id
            else:
                sender_username = 'unknown'
                sender_name = 'unknown'
                sender_id = 'unknown'
        except Exception as e:
            print(f"Error retrieving sender: {e}")
            return

        # B·ªè qua c√°c tin nh·∫Øn do ch√≠nh bot g·ª≠i ƒëi
        if event.out:
            print("Message sent by the bot itself. Ignoring.")
            return

        # Ki·ªÉm tra th·ªùi gian hi·ªán t·∫°i
        if not is_within_allowed_hours() and not event.message.message.startswith('/ve'):
            if event.message.message == '/donate':
                print("Received /donate command.")
                
                # T·∫°o th√¥ng ƒëi·ªáp donate
                try:
                    donate_message = (
                        f"Ch√†o <b>{sender_name}</b> nh√©, s·ª± ƒë√≥ng g√≥p c·ªßa b·∫°n lu√¥n t·∫°o ra s·ª©c m·∫°nh gi√∫p m√¨nh th√™m nhi·ªÅu s√°ng t·∫°o m·ªõi h∆°n.\n\n"
                        "ƒê√¢y l√† th√¥ng tin chuy·ªÉn kho·∫£n c·ªßa t√¥i\n"
                        "STK: <b>9696 186 88888</b>\n"
                        "T√äN TK: <b>DANG TUNG ANH</b>\n"
                        "BANK: <b>MBBANK</b>\n"
                        "C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng BOT by TAK"
                    )
                    
                    # Ki·ªÉm tra ƒë·ªô d√†i tin nh·∫Øn
                    if len(donate_message) > 4096:
                        raise ValueError("Message length exceeds 4096 characters.")
                    
                    # T·∫°o m√£ QR cho th√¥ng tin chuy·ªÉn kho·∫£n
                    qr_data = "969618688888\nDANG TUNG ANH\nMBBANK"
                    qr = qrcode.make(qr_data)
                    qr_path = "donate_qr.png"
                    qr.save(qr_path)
                except Exception as e:
                    print(f"Error creating message or QR code: {e}")
                    await client.send_message(sender_id, "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi t·∫°o tin nh·∫Øn ho·∫∑c m√£ QR.")
                    return
                
                # G·ª≠i ·∫£nh m√£ QR k√®m th√¥ng ƒëi·ªáp donate
                try:
                    await client.send_file(sender_id, qr_path, caption=donate_message, parse_mode='html')
                except Exception as e:
                    print(f"Error sending message: {e}")
                    await client.send_message(sender_id, "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi g·ª≠i tin nh·∫Øn donate.")
                
                return
            
            # Check l∆∞·ª£t s·ª≠ d·ª•ng v·∫Ω
            if event.message.message == '/checkve':
                user_usage = ve_usage.get(sender_username, 0)
                if sender_username == target_user:
                    await client.send_message(sender_id, "B·∫°n kh√¥ng gi·ªõi h·∫°n l∆∞·ª£t s·ª≠ d·ª•ng.")
                else:
                    remaining_usage = max_daily_drawings - user_usage
                    await client.send_message(sender_id, f"B·∫°n c√≤n {remaining_usage} l∆∞·ª£t s·ª≠ d·ª•ng.")
                return
            
             # X·ª≠ l√Ω l·ªánh /ve {prompt v·∫Ω tranh}
            if event.message.message.startswith('/ve '):
                prompt = event.message.message[4:]
                user_usage = ve_usage.get(sender_username, 0)

                if sender_username == target_user or user_usage < max_daily_drawings:
                    # N·∫øu kh√¥ng ph·∫£i l√† target_user, tƒÉng s·ªë l·∫ßn s·ª≠ d·ª•ng
                    if sender_username != target_user:
                        ve_usage[sender_username] = user_usage + 1
                        save_ve_usage(ve_usage)

                    await handle_ve_command(sender_id, sender_username, prompt)
                else:
                    await client.send_message(sender_id, f"B·∫°n ƒë√£ s·ª≠ d·ª•ng h·∫øt {max_daily_drawings} l∆∞·ª£t v·∫Ω h√¥m nay, vui l√≤ng li√™n h·ªá TAK ƒë·ªÉ m·ªü th√™m.")
                return
            
            # X·ª≠ l√Ω l·ªánh /addve @user {s·ªë l∆∞·ª£t}
            if event.message.message.startswith('/addve '):
                parts = event.message.message.split()
                if len(parts) == 3:
                    user_to_add = parts[1].lstrip('@')
                    add_amount = int(parts[2])
                    ve_usage[user_to_add] = ve_usage.get(user_to_add, 0) + add_amount
                    save_ve_usage(ve_usage)

                    # L·∫•y t√™n v√† h·ªç c·ªßa bot
                    me = await client.get_me()
                    bot_name = f"{me.first_name} {me.last_name or ''}".strip()  # K·∫øt h·ª£p c·∫£ first name v√† last name

                    await client.send_message(sender_id, f"ƒê√£ th√™m {add_amount} l∆∞·ª£t s·ª≠ d·ª•ng cho {user_to_add}.", parse_mode='html')
                    await client.send_message(user_to_add, f"<b>{bot_name}</b> v·ª´a th√™m cho b·∫°n <b>{add_amount}</b> ƒë·ªÉ v·∫Ω tranh r·ªìi ƒë√≥.", parse_mode='html')
                return
            
            # H√ÅT H√í GI·∫¢I TR√ç
            if event.message.message.startswith('/hat '):
                print("Received /hat command.")
                try:
                    # T√¨m v·ªã tr√≠ c·ªßa '@' ƒë·ªÉ ph√¢n bi·ªát lyric v√† username
                    command_content = event.message.message[5:].strip()  # B·ªè ƒëi ph·∫ßn '/hat '
                    at_index = command_content.rfind('@')
                    if at_index == -1:
                        await client.send_message(target_user, "C√∫ ph√°p kh√¥ng ƒë√∫ng. Vui l√≤ng s·ª≠ d·ª•ng c√∫ ph√°p: /hat {lyric} @user")
                        return

                    lyric = command_content[:at_index].strip()
                    recipient_username = command_content[at_index + 1:].strip()

                    # L·∫•y th·ª±c th·ªÉ ng∆∞·ªùi nh·∫≠n
                    recipient = await client.get_entity(recipient_username)
                    if not recipient:
                        await client.send_message(target_user, "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.")
                        return

                    # T·∫°o full name
                    full_name = f"{recipient.first_name} {recipient.last_name}".strip()

                    # T√°ch t·ª´ng d√≤ng trong lyrics
                    lines = lyric.split('\n')
                    sent_message = None
                    full_message = ""

                    for line in lines:
                        words = line.split()
                        current_message = ""

                        for word in words:
                            current_message += word + " "
                            # Th√™m t·ª´ v√†o d√≤ng hi·ªán t·∫°i
                            updated_message = full_message + current_message.strip()

                            if sent_message is None:
                                sent_message = await client.send_message(recipient.id, updated_message)
                            else:
                                await sent_message.edit(updated_message)

                            await asyncio.sleep(0.7)  # Delay 1 gi√¢y gi·ªØa m·ªói t·ª´

                        # Sau khi ho√†n th√†nh m·ªôt d√≤ng, gi·ªØ nguy√™n d√≤ng ƒë√£ ho√†n th√†nh v√† xu·ªëng d√≤ng
                        full_message += current_message.strip() + "\n"
                        await asyncio.sleep(2)  # Delay 2 gi√¢y gi·ªØa c√°c d√≤ng

                    print(f"Sent lyric to {recipient_username} successfully.")

                    # G·ª≠i tin nh·∫Øn t·ªõi target_user sau khi ho√†n th√†nh
                    await client.send_message(target_user, f"ƒê√£ g·ª≠i xong lyric t·ªõi <b>{full_name}</b> (@{recipient_username}).", parse_mode='html')

                    # Ch·ªù 5 gi√¢y tr∆∞·ªõc khi x√≥a tin nh·∫Øn
                    await asyncio.sleep(2)
                    # X√≥a tin nh·∫Øn sau khi ho√†n th√†nh
                    await sent_message.delete()

                except Exception as e:
                    print(f"Error in /hat command: {e}")
                    await client.send_message(target_user, f"C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh: {e}")
                return
            
            # X·ª≠ l√Ω l·ªánh /xoa @user
            if event.message.message.startswith('/xoa '):
                print("Received /xoa command.")
                
                # L·∫•y t√™n ng∆∞·ªùi d√πng c·∫ßn x√≥a tin nh·∫Øn
                target_user_to_delete = event.message.message.split(' ')[1].lstrip('@')
                
                try:
                    # X√°c ƒë·ªãnh th·ª±c th·ªÉ c·ªßa ng∆∞·ªùi d√πng
                    user_entity = await client.get_entity(target_user_to_delete)
                    
                    # X√≥a to√†n b·ªô cu·ªôc tr√≤ chuy·ªán t·ª´ c·∫£ hai ph√≠a gi·ªØa Kakalot v√† ng∆∞·ªùi d√πng ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
                    await client.delete_dialog(user_entity.id, revoke=True)
                    print(f"Deleted the entire chat with @{target_user_to_delete}.")
                except Exception as e:
                    print(f"Failed to delete chat with @{target_user_to_delete}: {e}")
                
                return

            # X·ª≠ l√Ω l·ªánh /xoa
            if event.message.message == '/xoa':
                print("Received /xoa command to delete all messages.")
                
                try:
                    # X√≥a to√†n b·ªô cu·ªôc tr√≤ chuy·ªán t·ª´ c·∫£ hai ph√≠a gi·ªØa Kakalot v√† Target_User
                    await client.delete_dialog(sender_username, revoke=True)
                    print(f"Deleted the entire chat with {sender_username}.")
                except Exception as e:
                    print(f"Failed to delete chat with {sender_username}: {e}")
                
                return

            # X·ª≠ l√Ω l·ªánh /clear @user
            if event.message.message.startswith('/clear '):
                print("Received /clear command.")
                target_user_to_clear = event.message.message.split(' ')[1]
                if target_user_to_clear.startswith('@'):
                    target_user_to_clear = target_user_to_clear.lstrip('@')
                    async for message in client.iter_messages(target_user_to_clear):
                        await client.delete_messages(target_user_to_clear, message.id, revoke=False)
                return

            # X·ª≠ l√Ω l·ªánh /clear
            if event.message.message == '/clear':
                print("Received /clear command to delete all messages.")
                async for message in client.iter_messages(sender_username):
                    await client.delete_messages(sender_username, message.id, revoke=False)
                return

            # X·ª≠ l√Ω l·ªánh /adduser @user
            if event.message.message.startswith('/adduser '):
                print("Received /adduser command.")
                user_to_exclude = event.message.message.split(' ')[1].lstrip('@')
                if user_to_exclude not in excluded_users:
                    excluded_users.append(user_to_exclude)
                    save_settings(excluded_users, allowed_groups)
                    print(f"Added {user_to_exclude} to excluded users.")
                    
                    # L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
                    try:
                        user_entity = await client.get_entity(user_to_exclude)
                        user_name = f"{user_entity.first_name} {user_entity.last_name or ''}".strip()
                    except Exception as e:
                        print(f"Error retrieving user info: {e}")
                        user_name = user_to_exclude  # S·ª≠ d·ª•ng username n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c t√™n
                    
                    await client.send_message(target_user, f"ƒê√£ th√™m {user_name} (@{user_to_exclude}) th√†nh c√¥ng v√†o danh s√°ch lo·∫°i tr·ª´.")
                else:
                    await client.send_message(target_user, f"Ng∆∞·ªùi d√πng (@{user_to_exclude}) ƒë√£ c√≥ trong danh s√°ch lo·∫°i tr·ª´.")
                return

            # X·ª≠ l√Ω l·ªánh /deluser @user
            if event.message.message.startswith('/deluser '):
                print("Received /deluser command.")
                user_to_include = event.message.message.split(' ')[1].lstrip('@')
                
                if user_to_include in excluded_users:
                    excluded_users.remove(user_to_include)
                    save_settings(excluded_users, allowed_groups)
                    print(f"Removed {user_to_include} from excluded users.")
                    
                    # L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
                    try:
                        user_entity = await client.get_entity(user_to_include)
                        user_name = f"{user_entity.first_name} {user_entity.last_name or ''}".strip()
                    except Exception as e:
                        print(f"Error retrieving user info: {e}")
                        user_name = user_to_include  # S·ª≠ d·ª•ng username n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c t√™n
                    
                    await client.send_message(target_user, f"B·∫°n ƒë√£ x√≥a {user_name} (@{user_to_include}) ra kh·ªèi danh s√°ch lo·∫°i tr·ª´ th√†nh c√¥ng.")
                else:
                    await client.send_message(target_user, f"Ng∆∞·ªùi d√πng (@{user_to_include}) kh√¥ng c√≥ trong danh s√°ch lo·∫°i tr·ª´.")
                return


            # X·ª≠ l√Ω l·ªánh /addgroup <group_id>
            if event.message.message.startswith('/addgroup '):
                print("Received /addgroup command.")
                parts = event.message.message.split(' ', 2)
                
                if len(parts) >= 2:
                    try:
                        # Lo·∫°i b·ªè k√Ω t·ª± "@" n·∫øu c√≥
                        group_id_str = parts[1].lstrip('@')
                        group_id = int(group_id_str)  # Chuy·ªÉn th√†nh s·ªë nguy√™n

                        entity = await client.get_entity(group_id)  # L·∫•y th√¥ng tin t·ª´ ID

                        # Ki·ªÉm tra n·∫øu ID l√† c·ªßa m·ªôt nh√≥m
                        if isinstance(entity, (Chat, Channel)):
                            group_name = entity.title
                            allowed_groups[str(group_id)] = group_name
                            save_settings(excluded_users, allowed_groups)
                            print(f"Added group {group_name} ({group_id}) to allowed groups.")
                            await client.send_message(target_user, f"ƒê√£ th√™m nh√≥m {group_name} (@{group_id}) th√†nh c√¥ng.")
                        else:
                            await client.send_message(target_user, f"ID ({group_id}) kh√¥ng ph·∫£i l√† m·ªôt nh√≥m h·ª£p l·ªá.")
                    
                    except ValueError:
                        await client.send_message(target_user, "ID nh√≥m kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.")
                    except Exception as e:
                        print(f"Error: {e}")
                        await client.send_message(target_user, f"Kh√¥ng th·ªÉ t√¨m th·∫•y nh√≥m v·ªõi ID: {group_id}. Vui l√≤ng ki·ªÉm tra l·∫°i.")
                
                return
    
            # X·ª≠ l√Ω l·ªánh /delgroup <group_id>
            if event.message.message.startswith('/delgroup '):
                print("Received /delgroup command.")
                try:
                    # Lo·∫°i b·ªè k√Ω t·ª± "@" n·∫øu c√≥
                    group_id_str = event.message.message.split(' ')[1].lstrip('@')
                    group_id = int(group_id_str)  # Chuy·ªÉn th√†nh s·ªë nguy√™n
                    
                    group_id_str = str(group_id)
                    if group_id_str in allowed_groups:
                        group_name = allowed_groups[group_id_str]
                        del allowed_groups[group_id_str]
                        save_settings(excluded_users, allowed_groups)
                        print(f"Removed group {group_name} ({group_id}) from allowed groups.")
                        await client.send_message(target_user, f"ƒê√£ x√≥a nh√≥m {group_name} (@{group_id}) th√†nh c√¥ng.")
                    else:
                        await client.send_message(target_user, f"Nh√≥m v·ªõi ID {group_id} kh√¥ng c√≥ trong danh s√°ch cho ph√©p.")
                
                except ValueError:
                    await client.send_message(target_user, "ID nh√≥m kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.")
                except Exception as e:
                    print(f"Error: {e}")
                    await client.send_message(target_user, f"ƒê√£ x·∫£y ra l·ªói khi x√≥a nh√≥m. Vui l√≤ng ki·ªÉm tra l·∫°i ID ho·∫∑c th·ª≠ l·∫°i sau.")
                
                return

            # X·ª≠ l√Ω l·ªánh /listuser
            if event.message.message == '/listuser':
                print("Received /listuser command.")
                user_list = []
                message = ""
                max_message_length = 4096  # Gi·ªõi h·∫°n k√Ω t·ª± c·ªßa m·ªôt tin nh·∫Øn Telegram l√† 4096 k√Ω t·ª±

                async for dialog in client.iter_dialogs():
                    entity = dialog.entity
                    if isinstance(entity, User) and not entity.bot:
                        username = entity.username
                        if username:
                            user_name = f"{entity.first_name} {entity.last_name or ''}".strip()
                            user_entry = f"{len(user_list) + 1}. {user_name} (@{username})"
                            
                            # Ki·ªÉm tra n·∫øu th√™m ng∆∞·ªùi d√πng n√†y c√≥ v∆∞·ª£t qu√° gi·ªõi h·∫°n k√Ω t·ª± kh√¥ng
                            if len(message) + len(user_entry) + 1 > max_message_length:
                                await client.send_message(target_user, message)  # G·ª≠i tin nh·∫Øn hi·ªán t·∫°i
                                message = ""  # B·∫Øt ƒë·∫ßu tin nh·∫Øn m·ªõi
                            
                            user_list.append(user_entry)
                            message += user_entry + "\n"

                if message:
                    await client.send_message(target_user, message)  # G·ª≠i tin nh·∫Øn cu·ªëi c√πng
                else:
                    await client.send_message(target_user, "Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o trong danh s√°ch.")

                # X√≥a to√†n b·ªô l·ªãch s·ª≠ tin nh·∫Øn trong cu·ªôc tr√≤ chuy·ªán
                await client.delete_dialog(target_user)

                return

            # X·ª≠ l√Ω l·ªánh /showuser
            if event.message.message == '/showuser':
                print("Received /showuser command.")
                user_list = []
                
                # L·∫•y t√™n ƒë·∫ßy ƒë·ªß v√† username c·ªßa m·ªói ng∆∞·ªùi d√πng trong danh s√°ch lo·∫°i tr·ª´
                for idx, user in enumerate(excluded_users):
                    try:
                        user_entity = await client.get_entity(user)
                        user_name = f"{user_entity.first_name} {user_entity.last_name or ''}".strip()
                        user_list.append(f"{idx + 1}. {user_name} (@{user})")
                    except Exception as e:
                        print(f"Error retrieving user info: {e}")
                        user_list.append(f"{idx + 1}. @{user}")  # Tr∆∞·ªùng h·ª£p kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin ng∆∞·ªùi d√πng
                
                if user_list:
                    message = "\n".join(user_list)
                else:
                    message = "Danh s√°ch ng∆∞·ªùi d√πng kh√¥ng c√≥."
                
                await client.send_message(target_user, message)
                return
            
            # X·ª≠ l√Ω l·ªánh /showgroup
            if event.message.message == '/showgroup':
                print("Received /showgroup command.")
                group_list = [f"{idx + 1}. {group_name} (@{group_id})" for idx, (group_id, group_name) in enumerate(allowed_groups.items())]
                
                if group_list:
                    message = "Danh s√°ch nh√≥m:\n" + "\n".join(group_list)
                else:
                    message = "Danh s√°ch nh√≥m kh√¥ng c√≥."
                
                await client.send_message(target_user, message)
                return


            # X·ª≠ l√Ω l·ªánh /listgroup
            if event.message.message == '/listgroup':
                print("Received /listgroup command.")
                group_list = []
                message = "Danh s√°ch nh√≥m:\n"
                max_message_length = 4096  # Gi·ªõi h·∫°n k√Ω t·ª± c·ªßa m·ªôt tin nh·∫Øn Telegram l√† 4096 k√Ω t·ª±
                async for dialog in client.iter_dialogs():
                    entity = dialog.entity
                    if isinstance(entity, (Chat, Channel)):
                        group_entry = f"{len(group_list) + 1}. {entity.title} (@{entity.id})"
                        
                        # Ki·ªÉm tra n·∫øu th√™m nh√≥m n√†y c√≥ v∆∞·ª£t qu√° gi·ªõi h·∫°n k√Ω t·ª± kh√¥ng
                        if len(message) + len(group_entry) + 1 > max_message_length:
                            await client.send_message(target_user, message)  # G·ª≠i tin nh·∫Øn hi·ªán t·∫°i
                            message = "Danh s√°ch nh√≥m (ti·∫øp t·ª•c):\n"  # B·∫Øt ƒë·∫ßu tin nh·∫Øn m·ªõi
                            
                        group_list.append(group_entry)
                        message += group_entry + "\n"

                if len(group_list) > 0:
                    await client.send_message(target_user, message)  # G·ª≠i tin nh·∫Øn cu·ªëi c√πng
                else:
                    await client.send_message(target_user, "Kh√¥ng c√≥ nh√≥m n√†o trong danh s√°ch.")
                
                # X√≥a to√†n b·ªô l·ªãch s·ª≠ tin nh·∫Øn trong cu·ªôc tr√≤ chuy·ªán
                await client.delete_dialog(target_user)
                
                return

            # Show ch·ª©c nƒÉng /sd
            if event.message.message == '/sd':
                print("Received /sd command.")
                sd_message = (
                    "Ch·ª©c nƒÉng hi·ªán t·∫°i c·ªßa BOT:\n\n"
                    "1. <b>/xoa</b>: X√≥a to√†n b·ªô cu·ªôc tr√≤ chuy·ªán gi·ªØa b·∫°n v√† bot t·ª´ c·∫£ hai ph√≠a.\n"
                    "   <b>/xoa @user</b>: X√≥a to√†n b·ªô cu·ªôc tr√≤ chuy·ªán gi·ªØa bot v√† ng∆∞·ªùi d√πng ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh t·ª´ c·∫£ hai ph√≠a.\n\n"
                    "2. <b>/clear</b>: X√≥a to√†n b·ªô l·ªãch s·ª≠ tr√≤ chuy·ªán gi·ªØa b·∫°n v√† bot t·ª´ ph√≠a bot.\n"
                    "   <b>/clear @user</b>: X√≥a to√†n b·ªô l·ªãch s·ª≠ tr√≤ chuy·ªán gi·ªØa bot v√† ng∆∞·ªùi d√πng ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh t·ª´ ph√≠a bot.\n\n"
                    "3. <b>/adduser @user</b>: Th√™m ng∆∞·ªùi d√πng v√†o danh s√°ch lo·∫°i tr·ª´, bot s·∫Ω kh√¥ng t∆∞∆°ng t√°c v·ªõi ng∆∞·ªùi d√πng n√†y.\n"
                    "   <b>/deluser @user</b>: X√≥a ng∆∞·ªùi d√πng kh·ªèi danh s√°ch lo·∫°i tr·ª´.\n\n"
                    "4. <b>/addgroup @id_group T√™n nh√≥m</b>: Th√™m nh√≥m v√†o danh s√°ch cho ph√©p, bot s·∫Ω l·∫Øng nghe v√† t∆∞∆°ng t√°c trong nh√≥m n√†y.\n"
                    "   <b>/delgroup @id_group</b>: X√≥a nh√≥m kh·ªèi danh s√°ch cho ph√©p.\n\n"
                    "5. <b>/listuser</b>: Hi·ªÉn th·ªã danh s√°ch t·∫•t c·∫£ c√°c ng∆∞·ªùi d√πng m√† bot c√≥ t∆∞∆°ng t√°c.\n"
                    "   <b>/listgroup</b>: Hi·ªÉn th·ªã danh s√°ch t·∫•t c·∫£ c√°c nh√≥m m√† bot tham gia.\n\n"
                    "6. <b>/showuser</b>: Hi·ªÉn th·ªã danh s√°ch c√°c ng∆∞·ªùi d√πng trong danh s√°ch lo·∫°i tr·ª´.\n"
                    "   <b>/showgroup</b>: Hi·ªÉn th·ªã danh s√°ch c√°c nh√≥m trong danh s√°ch cho ph√©p.\n\n"
                    "7. <b>/on</b>: B·∫≠t bot v√† thi·∫øt l·∫≠p th·ªùi gian ho·∫°t ƒë·ªông t·ª´ 12:00 ƒë·∫øn 22:30.\n"
                    "   <b>/off</b>: T·∫°m d·ª´ng bot v√† thi·∫øt l·∫≠p th·ªùi gian ho·∫°t ƒë·ªông theo gi·ªù hi·ªán t·∫°i.\n\n"
                    "8. <b>/ve {prompt}</b>: T·∫°o tranh d·ª±a tr√™n n·ªôi dung ƒë∆∞·ª£c cung c·∫•p. M·ªói ng∆∞·ªùi d√πng c√≥ s·ªë l∆∞·ª£t v·∫Ω gi·ªõi h·∫°n m·ªói ng√†y. N·∫øu ƒë√£ h·∫øt l∆∞·ª£t, h√£y li√™n h·ªá v·ªõi TAK ƒë·ªÉ m·ªü th√™m.\n\n"
                    "9. <b>/hat {lyric} @user</b>: G·ª≠i lyric t·ªõi ng∆∞·ªùi d√πng, t·ª´ng t·ª´ s·∫Ω xu·∫•t hi·ªán tu·∫ßn t·ª± nh∆∞ ƒëang g√µ ch·ªØ.\n\n"
                    "10. <b>/spam @user</b>: G·ª≠i m·ªôt lo·∫°t sticker t·ªõi ng∆∞·ªùi d√πng ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.\n\n"
                    "C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng BOT by TAK."
                )
                await client.send_message(target_user, sd_message, parse_mode='html')
                return

            # X·ª≠ l√Ω l·ªánh /spam @user
            if event.message.message.startswith('/spam '):
                print("Received /spam command.")
                target_to_spam = event.message.message.split(' ')[1].lstrip('@')

                try:
                    target_id = int(target_to_spam)
                    is_group = True
                except ValueError:
                    is_group = False

                try:
                    # S·ª≠ d·ª•ng tr·ª±c ti·∫øp client.get_entity ƒë·ªÉ l·∫•y entity c·ªßa ng∆∞·ªùi d√πng ho·∫∑c nh√≥m
                    if is_group:
                        entity = await client.get_entity(target_id)
                    else:
                        entity = await client.get_entity(target_to_spam)

                    if entity:
                        sticker_set_name = 'ingusan'
                        sticker_set_response = await client(GetStickerSetRequest(stickerset=InputStickerSetShortName(short_name=sticker_set_name), hash=0))

                        if hasattr(sticker_set_response, 'documents'):
                            stickers = sticker_set_response.documents
                            stickers.reverse()  # ƒê·∫£o ng∆∞·ª£c danh s√°ch sticker ƒë·ªÉ g·ª≠i t·ª´ d∆∞·ªõi l√™n tr√™n

                            for sticker in stickers:
                                try:
                                    await client.send_file(entity.id, sticker, delay=0.01)
                                except Exception as e:
                                    print(f"Failed to send a sticker to {target_to_spam}: {e}")

                            # L·∫•y t√™n ng∆∞·ªùi d√πng v√† username ƒë·ªÉ g·ª≠i th√¥ng b√°o
                            user_name = f"{entity.first_name} {entity.last_name or ''}".strip()
                            user_username = entity.username
                            await client.send_message(target_user, f"ƒê√£ g·ª≠i sticker t·ªõi <b>{user_name} (@{user_username})</b> th√†nh c√¥ng.", parse_mode='html')

                            print(f"Spammed {target_to_spam} with stickers.")
                        else:
                            print("No documents found in the sticker set.")
                    else:
                        print(f"Target {target_to_spam} is not a valid user or group.")
                except Exception as e:
                    print(f"Error occurred: {e}")

                return
# ================================================================
            else:
                print("Outside of active hours. Ignoring message.")
                return

# -----------------------------------------------------------------
        # X·ª≠ l√Ω tin nh·∫Øn ri√™ng t∆∞
        if event.is_private:
            if event.message.media:
                print(f"{sender_name} ({sender_id}) v·ª´a g·ª≠i m·ªôt file.")
            else:
                print(f"{sender_name} ({sender_id}) v·ª´a g·ª≠i tin nh·∫Øn.")
            
            # Ki·ªÉm tra danh s√°ch lo·∫°i tr·ª´
            if sender_username in excluded_users:
                print(f"User {sender_name} ({sender_id}) is not allowed. Ignoring message.")
                return  # B·ªè qua ng∆∞·ªùi d√πng trong danh s√°ch lo·∫°i tr·ª´, kh√¥ng th·ª±c hi·ªán h√†nh ƒë·ªông n√†o

                # X·ª≠ l√Ω tin nh·∫Øn t·ª´ target_user ƒë·∫øn Kakalot5678
                if sender_username == target_user:
                    print("Received message from target user.")
                    
                    # Ki·ªÉm tra xem tin nh·∫Øn c√≥ ph·∫£i l√† m·ªôt l·ªánh hay kh√¥ng
                    if event.message.message.startswith('/'):
                        print("Detected command, processing as a command.")
                        # ·ªû ƒë√¢y b·∫°n c√≥ th·ªÉ x·ª≠ l√Ω l·ªánh, v√≠ d·ª• nh∆∞ /xoa, /addgroup, v.v.
                        await process_command(event, sender_id, sender_username, sender_name)
                        return

                    # T√°ch n·ªôi dung v√† ID nh√≥m ho·∫∑c user t·ª´ tin nh·∫Øn
                    message_parts = event.message.message.rsplit(' ', 1)
                    if len(message_parts) < 2 or not message_parts[1].startswith('@'):
                        print("Invalid message format.")
                        return  # N·∫øu tin nh·∫Øn kh√¥ng c√≥ @id nh√≥m ho·∫∑c @user, b·ªè qua

                    group_or_user_id_with_at = message_parts[1]
                    group_or_user_id = group_or_user_id_with_at.lstrip('@')

                    try:
                        group_or_user_id = int(group_or_user_id)  # Chuy·ªÉn ƒë·ªïi ID nh√≥m sang d·∫°ng s·ªë
                        is_group = True
                    except ValueError:
                        is_group = False

                    caption = message_parts[0]  # Ph·∫ßn ch√∫ th√≠ch (lo·∫°i b·ªè @user ho·∫∑c @id_nh√≥m)
                    
                    if is_group and str(group_or_user_id) in allowed_groups:
                        print(f"Forwarding message to group {group_or_user_id}.")
                        # G·ª≠i n·ªôi dung v√†o nh√≥m v·ªõi ID ch·ªâ ƒë·ªãnh
                        if event.message.media:
                            await client.send_file(group_or_user_id, event.message.media, caption=caption)
                        else:
                            await client.send_message(group_or_user_id, caption)
                    elif not is_group:
                        print(f"Forwarding message to user {group_or_user_id}.")
                        if group_or_user_id in excluded_users:
                            print(f"User {group_or_user_id} is not allowed. Ignoring message.")
                            await client.send_message(sender_username, f"Xin l·ªói @{group_or_user_id} n√†y t√¥i s·∫Ω kh√¥ng t∆∞∆°ng t√°c d∆∞·ªõi b·∫•t k·ª≥ h√¨nh th·ª©c n√†o. C·∫£m ∆°n!")
                        else:
                            if event.message.media:
                                await client.send_file(group_or_user_id, event.message.media, caption=caption)
                            else:
                                await client.send_message(group_or_user_id, caption)
                    else:
                        print(f"Group {group_or_user_id} is not allowed. Ignoring message.")
                else:
                    print(f"Forwarding message to {target_user}.")
                    # Chuy·ªÉn ti·∫øp tin nh·∫Øn vƒÉn b·∫£n ƒë·∫øn target_user
                    if event.message.media:
                        # N·∫øu l√† tin nh·∫Øn ch·ª©a t·ªáp tin, forward ƒë·∫øn target_user
                        await client.forward_messages(target_user, event.message)
                    else:
                        # N·∫øu l√† tin nh·∫Øn vƒÉn b·∫£n, b√≥c t√°ch v√† g·ª≠i n·ªôi dung sang target_user
                        formatted_message = (
                            f"Ng∆∞·ªùi g·ª≠i: {sender_name} (@{sender_username})\n"
                            f"N·ªôi dung: {event.message.message}"
                        )
                        await client.send_message(target_user, formatted_message)

        # X·ª≠ l√Ω tin nh·∫Øn trong nh√≥m
        elif event.is_group:
            chat = await event.get_chat()
            chat_id_str = str(chat.id)
            
            # Ki·ªÉm tra n·∫øu nh√≥m ƒë∆∞·ª£c ph√©p
            if chat_id_str in allowed_groups and chat.title == allowed_groups[chat_id_str]:
                if event.message.media:
                    print(f"{sender_name} - {chat.title} - ({chat.id}) v·ª´a g·ª≠i m·ªôt file.")
                else:
                    print(f"{sender_name} - {chat.title} - ({chat.id}) v·ª´a g·ª≠i tin nh·∫Øn.")
                
                # B·ªè qua tin nh·∫Øn n·∫øu do ch√≠nh bot g·ª≠i ƒëi
                if event.out:
                    print("Message sent by the bot itself in group. Ignoring.")
                    return
                
                # R√∫t g·ªçn t√™n nh√≥m n·∫øu d√†i h∆°n 50 k√Ω t·ª±
                truncated_chat_title = (chat.title[:47] + '...') if len(chat.title) > 50 else chat.title
                
                # ƒê·ªãnh d·∫°ng th√¥ng b√°o
                formatted_message = (
                    f"Nh√≥m: {truncated_chat_title} (@{chat.id})\n"
                    f"T√™n: {sender_name} (@{sender_username})\n"
                    f"N·ªôi dung: {event.message.message}"
                )
                
                if event.message.media:
                    # N·∫øu l√† tin nh·∫Øn ch·ª©a t·ªáp tin, forward ƒë·∫øn target_user
                    await client.forward_messages(target_user, event.message)
                else:
                    # G·ª≠i tin nh·∫Øn vƒÉn b·∫£n v·ªõi ƒë·ªãnh d·∫°ng mong mu·ªën
                    await client.send_message(target_user, formatted_message)
            else:
                print(f"Group {chat.title} ({chat.id}) is not allowed. Ignoring message.")


    print("Bot is running...")
    await client.run_until_disconnected()

try:
    with client:
        client.loop.run_until_complete(main())
except KeyboardInterrupt:
    print("Bot stopped manually.")
